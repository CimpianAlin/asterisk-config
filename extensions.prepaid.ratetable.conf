[general]
autofallthrough=no	;don't let asterisk guss
static=yes		;don't allow asterisk to change the config file

[globals]


[test-lines]
; These are test extensions that you might want to disable after installation.
; Note that there is no billing code in this context.

; Record voice file to /tmp directory
exten => 1111,1,Set(CDR(hangupdirection)=A)
same => n,Answer(2000) ; Call 1111 to Record new Sound Files
same => n,Playback(beep)	; play a beep sount to indicat that recording has startet
same => n,Record(/tmp/asterisk-recording:gsm) ; Press # to stop recording
same => n,Wait(2)
same => n,Playback(/tmp/asterisk-recording) ; Listen to your voice
same => n,wait(2)
same => n,Set(CDR(hangupdirection)=SYSTEM)
same => n,Hangup(16)

; Create an extension, 2600, for evaluating echo latency.
exten => 2600,1,Set(CDR(hangupdirection)=A)
same => n,Set(CDR(B-Number)=${EXTEN})
same => n,Set(CDR(A-IMSI)=${CALLERID(num)})
same => n,Set(CDR(A-Number)=${ODBC_SQL(select callerid from sip_buddies where username=\"${A-IMSI}\")})
same => n,Answer()                     ; Do the echo test
same => n,Echo()                    ; Do the echo test
same => n,Hangup

; 2601 is for testing prompts
exten => 2601,1,Set(CDR(hangupdirection)=A)
same => n,Set(CDR(B-Number)=${EXTEN})
same => n,Set(CDR(A-IMSI)=${CALLERID(num)})
same => n,Set(CDR(A-Number)=${ODBC_SQL(select callerid from sip_buddies where username=\"${A-IMSI}\")})
same => n,Answer(2000)	;allow the channel to be establis
same => n,GoSub(CallLimit,s,1(${CALLERID(num)},${EXTEN}))
same => n,Playback(followme/sorry)
same => n,Set(CDR(hangupdirection)=SYSTEM)
same => n,Hangup(16)

; 2602 testtone
exten => 2602,1,Set(hangupdirection=A)
same => n,Set(CDR(B-Number)=${EXTEN})
same => n,Set(CDR(A-IMSI)=${CALLERID(num)})
same => n,Set(CDR(A-Number)=${ODBC_SQL(select callerid from sip_buddies where username=\"${A-IMSI}\")})
same => n,GoSub(CallLimit,s,1(${CALLERID(num)},${EXTEN}))
same => n,Answer()
same => n,Milliwatt()
same => n,Set(hangupdirection=SYSTEM)
same => n,Hangup()


; The 2101 extension is used for factory testing with zoiper.
exten => 2101,1,Set(CDR(hangupdirection)=A)
same => n,Set(CDR(B-Number)=${EXTEN})
same => n,Set(CDR(A-IMSI)=${CALLERID(num)})
same => n,Set(CDR(A-Number)=${ODBC_SQL(select callerid from sip_buddies where username=\"${A-IMSI}\")})
same => n,Dial(SIP/zoiper)

; The 2100 extension is for factory testing with the test SIM.
exten => 2100,1,Set(CDR(hangupdirection)=A)
same => n,Set(CDR(B-Number)=${EXTEN})
same => n,Set(CDR(A-IMSI)=${CALLERID(num)})
same => n,Set(CDR(A-Number)=${ODBC_SQL(select callerid from sip_buddies where username=\"${A-IMSI}\")})
same => n,Dial(SIP/IMSI001010000000000)

; Hangup cleanup.
;exten => h,1,Set(CallDuration=${CDR(duration)})
;exten => h,n,Set(Rate=0)


[sip-local]
; This context is for local SIP lines.

[HangupCause]
exten => 0,1000(HangupCause),GoSub(CleanupCDR,s,1)
same => n,Playback(PartyNotAnswering)					;0 Unspecified. No other cause codes applicable.	; case 5 - C3
;exten => 0,1000(HangupCause),Playback(PartyNotAvailableNow)		;0 Unspecified. No other cause codes applicable.	; case 5 - P2.6
exten => 16,1000(HangupCause),Hangup(${HANGUPCAUSE})			;16 NORMAL_CLEARING
exten => 17,1000(HangupCause),Busy(5)					;17 USER_BUSY						; case 1, 2, 3
exten => 19,1000(HangupCause),GoSub(CleanupCDR,s,1)
same => n,Playback(NumberOutOfCoverage)					;19 NO_ANSWER						; case 6
exten => _X!,1000(HangupCause),Return()

[CleanupCDR]
exten => s,1,ResetCDR(w)
same => n,NoCDR()
same => n,Return()

[outbound-trunk]
; FIXME -- This still needs testing.
exten => _X.,1,Set(CDR(bill-context)=outbound-trunk)
exten => _X.,n,Set(CDR(B-Number)=${EXTEN})
exten => _X.,n,Set(CDR(A-IMSI)=${CALLERID(num)})
exten => _X.,n,Set(CDR(B-IMSI)=${ODBC_SQL(select dial from dialdata_table where exten=\"${CDR(B-Number)}\")})
exten => _X.,n,Set(CDR(A-Number)=${ODBC_SQL(select callerid from sip_buddies where username=\"${A-IMSI}\")})
exten => _X.,n,Set(GatewayAddress="gateway.voip.com")
exten => _X.,n,Set(GatewayAddress2="gateway.voip.com")	;failower address
exten => _X.,n,Set(AccountBalance=${ODBC_SQL(select account_balance from sip_buddies where username = \"${CDR(A-IMSI)}\")})
;Is this user prepaid or not?
exten => _X.,n,Set(Prepaid=${ODBC_SQL(select prepaid from sip_buddies where username = \"${CDR(A-IMSI)}\")})
; Get the calling rate and convert balance to seconds.
exten => _X.,n,Set(Rate=${ODBC_SQL(select rate from rates where service = \"out-of-network-call\")})
; Put the rate in the CDR file in case we change it during the month
exten => _X.,n,Set(CDR(bill-rate)=${Rate})
; It seems that Asterisk 10.9 only allows one operation per MATH call. -DCK
;exten => _X.,n,Set(MillisecondsOnAccount=${MATH(1000*${AccountBalance}/${Rate},i)})
exten => _X.,n,Set(SecondsOnAccount=${MATH(${AccountBalance}/${Rate},i)})
exten => _X.,n,Set(MillisecondsOnAccount=${MATH(1000*${SecondsOnAccount},i)})
; Prepaid with less than 30 seconds on the account?  Reject the call.
; Let post-paid subscribers continue, regardless of balance..
exten => _X.,n,Set(HaveMoney=$[$[${MillisecondsOnAccount} > 30000] | $["${Prepaid}" = "0"]])
exten => _X.,n,GotoIf(${EXISTS(${HaveMoney})}?placecall-external)
;If you wanted to tell the user they didn't have a sufficient balance, you would do it here
exten => _X.,n,Playback(beeperr)
exten => _X.,n,Hangup
; Route the call.  Set a timer with a 20-second warning beep for prepaid.
exten => _X.,n(placecall-external),ExecIf($[${Prepaid}]?Dial(SIP/${CDR(B-Number)}@${GatewayAddress},30,L(${MillisecondsOnAccount}:20000)):Dial(SIP/${CDR(B-Number)}@${GatewayAddress},30))
exten => _X.,n,Set(NoFailoverCause=1,16,17,18,19,21,22,28);list of hangup causes we do not want to activate failover for
exten => _X.,n,ExecIf($["${NoFailoverCause}"="${LISTFILTER(NoFailoverCause,",",${HANGUPCAUSE})}"]?:Hangup())
exten => _X.,n(placecall-external),ExecIf($[${Prepaid}]?Dial(SIP/${CDR(B-Number)}@${GatewayAddress2},30,L(${MillisecondsOnAccount}:20000)):Dial(SIP/${CDR(B-Number)}@${GatewayAddress2},30))
; Hangup cleanup.
; Decrement the account by the call time.
exten => h,1,Set(CallDuration=${CDR(billsec)})
exten => h,n,Set(CallCharge=${MATH(${CallDuration}*${Rate})})
; Note: Asterisk gives a warning here, but this still works.
exten => h,n,Set(Result=${ODBC_SQL(update sip_buddies set account_balance = account_balance - ${CallCharge} where (username = \"${CDR(A-IMSI)}\"))})
;exten => h,n,Goto(${HANGUPCAUSE},HangupCause)



[other-lines]
; This is the summary of all non-cellular contexts.
include => test-lines
include => sip-local
include => outbound-trunk

; case 7
exten => i,1,Playback(NumberIncorrect)

[unprovisioned-phones]
; This is where we process call requests from phones that we can't find in the SR.
include => test-lines



[macro-dialGSM-prepay](HangupCause)
; macro for OpenBTS users
exten => s,1,Set(CDR(hangup-direction)=A)
exten => s,n,Dial(SIP/${ARG1},30,${ARG2})
exten => s,n,NoOP(direction:"${CDR(hangup-direction)}" status:${DIALSTATUS} cause:${HANGUPCAUSE})
exten => s,n,Set(CDR(hangup-direction)=${IF($["${DIALSTATUS}"="ANSWER"]?B:C)})
exten => s,n,Goto(${HANGUPCAUSE},HangupCause)


[macro-dialGSM-postpay](HangupCause)
; macro for OpenBTS users
exten => s,1,Set(CDR(hangup-direction)=A)
exten => s,n,Dial(SIP/${ARG1},30)
exten => s,n,NoOP(direction:"${CDR(hangup-direction)}" status:${DIALSTATUS} cause:${HANGUPCAUSE})
exten => s,n,Set(CDR(hangup-direction)=${IF($["${DIALSTATUS}"="ANSWER"]?B:C)})
exten => s,n,Goto(${HANGUPCAUSE},HangupCause)



[phones]
; *** THIS STILL NEEDS TESTING. ***
; This is the context for handsets provisioned through the realtime database.
; Get the caller's IMSI.
exten => _X.,1,Set(CDR(bill-context)=phones)
exten => _X.,n,Set(CDR(B-Number)=${EXTEN})
exten => _X.,n,Set(CDR(A-IMSI)=${CALLERID(num)})
exten => _X.,n,Set(CDR(B-IMSI)=${ODBC_SQL(select dial from dialdata_table where exten=\"${B-Number}\")})
exten => _X.,n,Set(CDR(A-Number)=${ODBC_SQL(select callerid from sip_buddies where username=\"${A-IMSI}\")})
exten => _X.,n,Set(CALLERID(num)=${A-Number})
; Is this phone provisioned?  What's the balance?
exten => _X.,n,Set(AccountBalance=${ODBC_SQL(select account_balance from sip_buddies where username = \"${CDR(A-IMSI)}\")})
; If no result, this phone was not provisioned.
exten => _X.,n,GotoIf($["${AccountBalance}"=""]?unprovisioned-phones,${EXTEN},1)
;Is this user prepaid or not?
exten => _X.,n,Set(Prepaid=${ODBC_SQL(select prepaid from sip_buddies where username = \"${CDR(A-IMSI)}\")})
; Is it an in-network call, to another phone in the registry?
exten => _X.,n,Set(CalledIMSI=${ODBC_SQL(select dial from dialdata_table where exten = \"${EXTEN}\")})
; Not in the registry?  Go do a different context for that.
exten => _X.,n,GotoIf($["${CDR(B-IMSI)}"=""]?other-lines,${EXTEN},1)
; From this point down, we are processing an in-network call.
; Get the calling rate and convert balance to seconds.
exten => _X.,n,Set(Rate=${ODBC_SQL(select rate from rates where service = \"in-network-call\")})
; Put the rate in the CDR file in case we change it during the month
exten => _X.,n,Set(CDR(bill-rate)=${Rate})
; It seems that Asterisk 10.9 only allows one operation per MATH call. -DCK
;exten => _X.,n,Set(MillisecondsOnAccount=${MATH(1000*${AccountBalance}/${Rate},i)})
exten => _X.,n,Set(SecondsOnAccount=${MATH(${AccountBalance}/${Rate},i)})
exten => _X.,n,Set(MillisecondsOnAccount=${MATH(1000*${SecondsOnAccount},i)})
; Get the IP address of the serving BTS.
exten => _X.,n,Set(ServingBTSIPAddr=${ODBC_SQL(select ipaddr from sip_buddies where username=\"${CDR(A-IMSI)}\")})
exten => _X.,n,GotoIf($["${ServingBTSIPAddr}"!=""]?gotipaddr)
; no IP address? try localhost, which works in most single-BTS networks
exten => _X.,n,Set(ServingBTSIPAddr="127.0.0.1")
exten => _X.,n(gotipaddr),Set(ServingBTSPort=${ODBC_SQL(select port from sip_buddies where username=\"${CDR(A-IMSI)}\")})
exten => _X.,n,GotoIf($["${ServingBTSPort}"!=""]?gotport)
; Port was not set, so set to default. Gets around bug in subscriberRegistry
exten => _X.,n,Set(ServingBTSPort=5062)
; Prepaid with less than 30 seconds on the account?  Reject the call.
; Let post-paid subscribers continue, regardless of balance..
exten => _X.,n(gotport),Set(HaveMoney=$[$[${MillisecondsOnAccount} > 30000] | $["${Prepaid}" = "0"]])
exten => _X.,n,GotoIf(${EXISTS(${HaveMoney})}]?placecall)
;If you wanted to tell the user they didn't have a sufficient balance, you would do it here
exten => _X.,n,Playback(beeperr)
exten => _X.,n,Hangup
; Route the call.  Set a timer with a 20-second warning beep for prepaid.
exten => _X.,n(placecall),ExecIf($[${Prepaid}]?Macro(dialGSM-prepay,${CDR(B-IMSI)}@${ServingBTSIPAddr}:${ServingBTSPort},L(${MillisecondsOnAccount}:20000))):Macro(dialGSM-postpay,${CDR(B-IMSI)}@${ServingBTSIPAddr}:${ServingBTSPort}))
; Hangup cleanup.
; We end up back here, whatever context to go to.
; Decrement the account by the call time.
exten => h,1,Set(CallDuration=${CDR(billsec)})
exten => h,n,ExecIf($["${DIALSTATUS}"="ANSWER"]?Set(CallCharge=${MATH(${CallDuration}*${Rate},i)}):Set(CallCharge=0))
; Note: Asterisk gives a warning here, but this still works.
exten => h,n,ExecIf($[${CallCharge}!=0]?Set(Result=${ODBC_SQL(update sip_buddies set account_balance = account_balance - ${CallCharge} where (username = \"${CDR(A-IMSI)}\"))}))
;exten => h,n,Goto(${HANGUPCAUSE},HangupCause)


[from-network]
; This assumes that billing for inbound internetworked calls was handled somewhere else.
; Is it an in-network call, to another phone in the registry?
exten => _X.,1,Set(CDR(B-Number)=${EXTEN})
exten => _X.,n,Set(CDR(B-IMSI)=${ODBC_SQL(select dial from dialdata_table where exten=\"${CDR(B-Number)}\")})
exten => _X.,n,Set(CDR(A-Number)=${CALLERID(num)})
; Not in the registry?
exten => _X.,n,ExecIf($["${CDR(B-IMSI)}"=""]?Hangup(20))
; Get the IP address of the serving BTS.
exten => _X.,n,Set(ServingBTSIPAddr=${ODBC_SQL(select ipaddr||\":\"||port from sip_buddies where username = \"${CDR(B-IMSI)}\")})
; No registered address?  Then we can't route the call.
exten => _X.,n,ExecIf($["${ServingBTSIPAddr}"=""]?Hangup(20))
exten => _X.,n,Set(CDR(bill-context)=from-network)
; Route the call
exten => _X.,n,Dial(SIP/${CDR(B-IMSI)}@${ServingBTSIPAddr})

[from-pstn]
exten => _X!,1,Set(B-Number=${EXTEN})
same => n,Set(B-IMSI=${ODBC_SQL(select dial from dialdata_table where exten=\"${B-Number}\")})
same => n,Set(B-IPAddr=${ODBC_SQL(select ipaddr from sip_buddies where username=\"${B-IMSI}\")})
same => n,ExecIf($["${B-IPAddr}"=""]?Set(B-IPAddr="127.0.0.1"))	; Port was not set, so set to default. Gets around bug in subscriberRegistry
same => n,Set(B-Port=${ODBC_SQL(select port from sip_buddies where username=\"${B-IMSI}\")})
same => n,ExecIf($["${B-Port}"=""]?Set(B-Port=5062))			; Port was not set, so set to default. Gets around bug in subscriberRegistry
same => n,GoSub(dialGSM,${B-Number},1(${B-IMSI},${B-IPAddr},${B-Port}))
same => n,Progress()
same => n,Playback(AllCircuitsBusy,noanswer)				;all other error codes
same => n,Congestion(5)
