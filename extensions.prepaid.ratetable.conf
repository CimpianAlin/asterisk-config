[globals]


[test-lines]
; These are test extensions that you might want to disable after installation.
; Note that there is no billing code in this context.

; Create an extension, 2600, for evaluating echo latency.
exten => 2600,1,Answer()                     ; Do the echo test
exten => 2600,n,Echo()                    ; Do the echo test
exten => 2600,n,Hangup
; The 2101 extension is used for factory testing with zoiper.
exten => 2101,1,Dial(SIP/zoiper)
; The 2100 extension is for factory testing with the test SIM.
exten => 2100,1,Dial(SIP/IMSI001010000000000)
; Hangup cleanup.
;exten => h,1,Set(CallDuration=${CDR(duration)})
;exten => h,n,Set(CellingIMSI=${CALLERID(name)})
;exten => h,n,Set(Rate=0)


[sip-local]
; This context is for local SIP lines.




[outbound-trunk]
; FIXME -- This still needs testing.
exten => _X.,1,Set(CDR(bill-context)=outbound-trunk)
exten => _X.,n,Set(CallingIMSI=${CALLERID(name)})
exten => _X.,n,Set(GatewayAddress="gateway.voip.com")
exten => _X.,n,Set(AccountBalance=${ODBC_SQL(select account_balance from sip_buddies where username = \"${CallingIMSI}\")})
;Is this user prepaid or not?
exten => _X.,n,Set(Prepaid=${ODBC_SQL(select prepaid from sip_buddies where username = \"${CallingIMSI}\")})
; Get the calling rate and convert balance to seconds.
exten => _X.,n,Set(Rate=${ODBC_SQL(select rate from rates where service = \"out-of-network-call\")})
; It seems that Asterisk 10.9 only allows one operation per MATH call. -DCK
;exten => _X.,n,Set(MillisecondsOnAccount=${MATH(1000*${AccountBalance}/${Rate},i)})
exten => _X.,n,Set(SecondsOnAccount=${MATH(${AccountBalance}/${Rate},i)})
exten => _X.,n,Set(MillisecondsOnAccount=${MATH(1000*${SecondsOnAccount},i)})
; Prepaid with less than 30 seconds on the account?  Reject the call.
; Let post-paid subscribers continue, regardless of balance..
exten => _X.,n,Set(HaveMoney=$[$[${MillisecondsOnAccount} > 30000] | $["${Prepaid}" = "0"]])
exten => _X.,n,GotoIf($[${HaveMoney}] ?placecall-external)]
;If you wanted to tell the user they didn't have a sufficient balance, you would do it here
exten => _X.,n,Playback(beeperr)
exten => _X.,n,Hangup
; Route the call.  Set a timer with a 20-second warning beep for prepaid.
exten => _X.,n(placecall-external),ExecIf($[${Prepaid}] ?Dial(SIP/${EXTEN}@${GatewayAddress},30,L(${MillisecondsOnAccount}:20000)):Dial(SIP/${EXTEN}@${GatewayAddress},30))
; Hangup cleanup.
; Decrement the account by the call time.
exten => h,1,Set(CallDuration=${CDR(billsec)})
exten => h,n,Set(CallCharge=${MATH(${CallDuration}*${Rate})})
; Note: Asterisk gives a warning here, but this still works.
exten => h,n,Set(Result=${ODBC_SQL(update sip_buddies set account_balance = account_balance - ${CallCharge} where (username = \"${CallingIMSI}\"))})




[other-lines]
; This is the summary of all non-cellular contexts.
include => test-lines
include => sip-local
include => outbound-trunk

[unprovisioned-phones]
; This is where we process call requests from phones that we can't find in the SR.
include => test-lines



[macro-dialGSM-prepay]
; macro for OpenBTS users
exten => s,1,Set(CDR(hangup-direction)=A)
exten => s,n,Dial(SIP/${ARG1},30,L(${ARG2}):20000)
exten => s,n,NoOP(direction:"${CDR(hangup-direction)}" status:${DIALSTATUS} cause:${HANGUPCAUSE})
exten => s,n,Set(CDR(hangup-direction)=${IF($["${DIALSTATUS}"="ANSWER"]?B:C)})
exten => s,n,Goto(s-${DIALSTATUS},1)
exten => s-ANSWER,1,Hangup
exten => s-CANCEL,1,Hangup
exten => s-NOANSWER,1,Hangup
; if you had a voice mail system, these would be where you would invoke it
exten => s-BUSY,1,Busy(30)
exten => s-BUSY,n,Hangup
exten => s-CONGESTION,1,Congestion(30)
exten => s-CONGESTION,n,Hangup
exten => s-CHANUNAVAIL,1,playback(vm-isunavail)
exten => s-CHANUNAVAIL,n,Hangup


[macro-dialGSM-postpay]
; macro for OpenBTS users
exten => s,1,Set(CDR(hangup-direction)=A)
exten => s,n,Dial(SIP/${ARG1},30)
exten => s,n,NoOP(direction:"${CDR(hangup-direction)}" status:${DIALSTATUS} cause:${HANGUPCAUSE})
exten => s,n,Set(CDR(hangup-direction)=${IF($["${DIALSTATUS}"="ANSWER"]?B:C)})
exten => s,n,Goto(s-${DIALSTATUS},1)
exten => s-ANSWER,1,Hangup
exten => s-CANCEL,1,Hangup
exten => s-NOANSWER,1,Hangup
; if you had a voice mail system, these would be where you would invoke it
exten => s-BUSY,1,Busy(30)
exten => s-BUSY,n,Hangup
exten => s-CONGESTION,1,Congestion(30)
exten => s-CONGESTION,n,Hangup
exten => s-CHANUNAVAIL,1,playback(vm-isunavail)
exten => s-CHANUNAVAIL,n,Hangup



[phones]
; *** THIS STILL NEEDS TESTING. ***
; This is the context for handsets provisioned through the realtime database.
; Get the caller's IMSI.
exten => _X.,1,Set(CDR(bill-context)=phones)
exten => _X.,n,Set(CallingIMSI=${CALLERID(name)})
exten => _X.,n,Set(CALLERID(num)=${ODBC_SQL(select callerid from sip_buddies where username=\"${CallingIMSI}\")})
; Is this phone provisioned?  What's the balance?
exten => _X.,n,Set(AccountBalance=${ODBC_SQL(select account_balance from sip_buddies where username = \"${CallingIMSI}\")})
; If no result, this phone was not provisioned.
exten => _X.,n,GotoIf($["${AccountBalance}"=""] ?unprovisioned-phones,${EXTEN},1)
;Is this user prepaid or not?
exten => _X.,n,Set(Prepaid=${ODBC_SQL(select prepaid from sip_buddies where username = \"${CallingIMSI}\")})
; Is it an in-network call, to another phone in the registry?
exten => _X.,n,Set(CalledIMSI=${ODBC_SQL(select dial from dialdata_table where exten = \"${EXTEN}\")})
; Not in the registry?  Go do a different context for that.
exten => _X.,n,GotoIf($["${CalledIMSI}"=""] ?other-lines,${EXTEN},1)
; From this point down, we are processing an in-network call.
; Get the calling rate and convert balance to seconds.
exten => _X.,n,Set(Rate=${ODBC_SQL(select rate from rates where service = \"in-network-call\")})
; It seems that Asterisk 10.9 only allows one operation per MATH call. -DCK
;exten => _X.,n,Set(MillisecondsOnAccount=${MATH(1000*${AccountBalance}/${Rate},i)})
exten => _X.,n,Set(SecondsOnAccount=${MATH(${AccountBalance}/${Rate},i)})
exten => _X.,n,Set(MillisecondsOnAccount=${MATH(1000*${SecondsOnAccount},i)})
; Get the IP address of the serving BTS.
exten => _X.,n,Set(ServingBTSIPAddr=${ODBC_SQL(select ipaddr from sip_buddies where username=\"${CallingIMSI}\")})
exten => _X.,n,GotoIf($["${ServingBTSIPAddr}"!=""] ?gotipaddr)
; no IP address? try localhost, which works in most single-BTS networks
exten => _X.,n,Set(ServingBTSIPAddr="127.0.0.1")
exten => _X.,n(gotipaddr),Set(ServingBTSPort=${ODBC_SQL(select port from sip_buddies where username=\"${CallingIMSI}\")})
exten => _X.,n,GotoIf($["${ServingBTSPort}"!=""] ?gotport)
; Port was not set, so set to default. Gets around bug in subscriberRegistry
exten => _X.,n,Set(ServingBTSPort=5062)
; Prepaid with less than 30 seconds on the account?  Reject the call.
; Let post-paid subscribers continue, regardless of balance..
exten => _X.,n(gotport),Set(HaveMoney=$[$[${MillisecondsOnAccount} > 30000] | $["${Prepaid}" = "0"]])
exten => _X.,n,GotoIf($[${HaveMoney}] ?placecall)]
;If you wanted to tell the user they didn't have a sufficient balance, you would do it here
exten => _X.,n,Playback(beeperr)
exten => _X.,n,Hangup
; Route the call.  Set a timer with a 20-second warning beep for prepaid.
exten => _X.,n(placecall),ExecIf($[${Prepaid}] ?Macro(dialGSM-prepay,${CalledIMSI}@${ServingBTSIPAddr}:${ServingBTSPort},${MillisecondsOnAccount})) :Macro(dialGSM-postpay,${CalledIMSI}@${ServingBTSIPAddr}:${ServingBTSPort}))
; Hangup cleanup.
; We end up back here, whatever context to go to.
; Decrement the account by the call time.
exten => h,1,Set(CallDuration=${CDR(billsec)})
exten => h,n,Set(CallCharge=${MATH(${CallDuration}*${Rate},i)})
; Note: Asterisk gives a warning here, but this still works.
exten => h,n,ExecIf($[${CallCharge}!=0] ?Set(Result=${ODBC_SQL(update sip_buddies set account_balance = account_balance - ${CallCharge} where (username = \"${CallingIMSI}\"))})



[from-network]
; This assumes that billing for inbound internetworked calls was handled somewhere else.
; Is it an in-network call, to another phone in the registry?
exten => _X.,1,Set(CalledIMSI=${ODBC_SQL(select dial from dialdata_table where exten = \"${EXTEN}\")})
; Not in the registry?
exten => _X.,n,ExecIf($["${CalledIMSI}"=""] ?Hangup(20))
; Get the IP address of the serving BTS.
exten => _X.,n,Set(ServingBTSIPAddr=${ODBC_SQL(select ipaddr||\":\"||port from sip_buddies where username = \"${CalledIMSI}\")})
; No registered address?  Then we can't route the call.
exten => _X.,n,ExecIf($["${ServingBTSIPAddr}"=""] ?Hangup(20))
exten => _X.,n,Set(CDR(bill-context)=from-network)
; Route the call.  Set a timer with a 20-second warning beep for prepaid.
exten => _X.,n,Dial(SIP/${CalledIMSI}@${ServingBTSIPAddr})



