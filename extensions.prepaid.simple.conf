[general]
autofallthrough=no	;don't let asterisk guss
static=yes		;don't allow asterisk to change the config file

[globals]



[test-lines]
; These are test extensions that you might want to disable after installation.
; Note that there is no billing code in this context.

; Create an extension, 2600, for evaluating echo latency.
exten => 2600,1,Answer()                     ; Do the echo test
exten => 2600,n,Echo()                    ; Do the echo test
exten => 2600,n,Hangup
; The 2101 extension is used for factory testing with zoiper.
exten => 2101,1,Dial(SIP/zoiper)
; The 2100 extension is for factory testing with the test SIM.
exten => 2100,1,Dial(SIP/IMSI001010000000000)
; Hangup cleanup.
exten => h,1,Set(CallDuration=${CDR(duration)})
exten => h,n,Set(CellingIMSI=${CALLERID(name)})


[sip-local]
; This context is for local SIP lines.




[outbound-trunk]
; If you had an external trunk, you would dial it here.
exten => _N.,1,Answer()




[other-lines]
; This is the summary of all non-cellular contexts.
include => test-lines
include => sip-local
include => outbound-trunk


[unprovisioned-phones]
; This is where we process call requests from phones that we can't find in the SR.
include => test-lines




[phones]
; This is the context for handsets provisioned through the realtime database.
; Get the caller's IMSI.
exten => _X.,n,Set(CDR(B-Number)=${EXTEN})
exten => _X.,n,Set(CDR(A-IMSI)=${CALLERID(num)})
exten => _X.,n,Set(CDR(B-IMSI)=${ODBC_SQL(select dial from dialdata_table where exten = \"${CDR(B-Number)}\")})
exten => _X.,n,Set(CDR(A-Number)=${ODBC_SQL(select callerid from sip_buddies where username=\"${A-IMSI}\")})
; Is this phone provisioned?  How many seconds on the account?
exten => _X.,n,Set(SecondsOnAccount=${ODBC_SQL(select secondsRemaining + (1-prepaid)*36000 from sip_buddies where username = \"${CDR(A-IMSI)}\")})
; If no result, this phone was not provisioned.
exten => _X.,n,GotoIf($["${SecondsOnAccount}"=""]?unprovisioned-phones,${CDR(B-Number)},1)
; Is it an in-network call, to another phone in the registry?
; if not in the registry?  Go do a different context for that.
exten => _X.,n,GotoIf($["${CDR(B-IMSI)}"=""]?other-lines,${CDR(B-Number)},1)
; From this point down, we are processing an in-network call.
; Get the IP address of the serving BTS.
exten => _X.,n,Set(ServingBTSIPAddr=${ODBC_SQL(select ipaddr||\":\"||port from sip_buddies where username = \"${CDR(B-IMSI)}\")})
; No registered address?  Then we can't route the call. ISDN cause 20: subscriber absent.
exten => _X.,n,ExecIf($["${ServingBTSIPAddr}"=""]?Hangup(20))
; Less than 30 seconds on the account?  Reject the call.
exten => _X.,n,ExecIf($["${SecondsOnAccount}"<"30"]?Hangup(21))
exten => _X.,n,Set(MillisecondsOnAccount=${MATH(${SecondsOnAccount}*1000)})
; Route the call.
exten => _X.,n,Dial(SIP/${CDR(B-IMSI)}@${ServingBTSIPAddr},30,L(${MillisecondsOnAccount}:20000))
; Hangup cleanup.
; Decrement the account by the call time.
exten => h,1,Set(CallDuration=${CDR(billsec)})
; Note: Asterisk gives a warning here, but this still works.
exten => h,n,Set(Result=${ODBC_SQL(update sip_buddies set secondsRemaining = secondsRemaining - ${CallDuration} where (username = \"${CDR(A-IMSI)}\" and prepaid = 1))})

[from-pstn]
exten => _X!,1,Set(B-Number=${EXTEN})
same => n,Set(B-IMSI=${ODBC_SQL(select dial from dialdata_table where exten=\"${B-Number}\")})
same => n,Set(B-IPAddr=${ODBC_SQL(select ipaddr from sip_buddies where username=\"${B-IMSI}\")})
same => n,ExecIf($["${B-IPAddr}"=""]?Set(B-IPAddr="127.0.0.1"))	; Port was not set, so set to default. Gets around bug in subscriberRegistry
same => n,Set(B-Port=${ODBC_SQL(select port from sip_buddies where username=\"${B-IMSI}\")})
same => n,ExecIf($["${B-Port}"=""]?Set(B-Port=5062))			; Port was not set, so set to default. Gets around bug in subscriberRegistry
same => n,GoSub(dialGSM,${B-Number},1(${B-IMSI},${B-IPAddr},${B-Port}))
same => n,Progress()
same => n,Playback(AllCircuitsBusy,noanswer)				;all other error codes
same => n,Congestion(5)
