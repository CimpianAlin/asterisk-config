[general]
autofallthrough=no	;don't let asterisk guss
static=yes		;don't allow asterisk to change the config file

[globals]



[test-lines]
; These are test extensions that you might want to disable after installation.
; Note that there is no billing code in this context.

; Create an extension, 2600, for evaluating echo latency.
exten => 2600,1,Answer()                     ; Do the echo test
exten => 2600,n,Echo()                    ; Do the echo test
exten => 2600,n,Hangup
; The 2101 extension is used for factory testing with zoiper.
exten => 2101,1,Dial(SIP/zoiper)
; The 2100 extension is for factory testing with the test SIM.
exten => 2100,1,Dial(SIP/IMSI001010000000000)
; Hangup cleanup.
exten => h,1,Set(CallDuration=${CDR(duration)})
exten => h,n,Set(CellingIMSI=${CALLERID(name)})


[sip-local]
; This context is for local SIP lines.




[outbound-trunk]
; If you had an external trunk, you would dial it here.
exten => _N.,1,Answer()




[other-lines]
; This is the summary of all non-cellular contexts.
include => test-lines
include => sip-local
include => outbound-trunk


[unprovisioned-phones]
; This is where we process call requests from phones that we can't find in the SR.
include => test-lines




[phones]
; This is the context for handsets provisioned through the realtime database.
; Get the caller's IMSI.
exten => _X.,1,Set(CallingIMSI=${CALLERID(name)})
; Is this phone provisioned?  How many seconds on the account?
exten => _X.,n,Set(SecondsOnAccount=${ODBC_SQL(select secondsRemaining + (1-prepaid)*36000 from sip_buddies where username = \"${CallingIMSI}\")})
; If no result, this phone was not provisioned.
exten => _X.,n,GotoIf($["${SecondsOnAccount}"=""] ?unprovisioned-phones,${EXTEN},1)
; Is it an in-network call, to another phone in the registry?
exten => _X.,n,Set(CalledIMSI=${ODBC_SQL(select dial from dialdata_table where exten = \"${EXTEN}\")})
; Not in the registry?  Go do a different context for that.
exten => _X.,n,GotoIf($["${CalledIMSI}"=""] ?other-lines,${EXTEN},1)
; From this point down, we are processing an in-network call.
; Get the IP address of the serving BTS.
exten => _X.,n,Set(ServingBTSIPAddr=${ODBC_SQL(select ipaddr||\":\"||port from sip_buddies where username = \"${CalledIMSI}\")})
; No registered address?  Then we can't route the call. ISDN cause 20: subscriber absent.
exten => _X.,n,ExecIf($["${ServingBTSIPAddr}"=""] ?Hangup(20))
; Less than 30 seconds on the account?  Reject the call.
exten => _X.,n,ExecIf($["${SecondsOnAccount}"<"30"] ?Hangup(21))
exten => _X.,n,Set(MillisecondsOnAccount=${MATH(${SecondsOnAccount}*1000)})
; Route the call.
exten => _X.,n,Dial(SIP/${CalledIMSI}@${ServingBTSIPAddr},30,L(${MillisecondsOnAccount}:20000))
; Hangup cleanup.
; Decrement the account by the call time.
exten => h,1,Set(CallDuration=${CDR(billsec)})
; Note: Asterisk gives a warning here, but this still works.
exten => h,n,Set(Result=${ODBC_SQL(update sip_buddies set secondsRemaining = secondsRemaining - ${CallDuration} where (username = \"${CallingIMSI}\" and prepaid = 1))})




