[globals]


[default]
; This is the context for handsets that are allowed to attached via open registration.
; Normally, this context is only used for testing.

; These are test extensions that you might want to disable after installation.

; Record voice file to /tmp directory
exten => 1111,1,Wait(2) ; Call 1111 to Record new Sound Files
exten => 1111,n,Record(/tmp/asterisk-recording:gsm) ; Press # to stop recording
exten => 1111,n,Wait(2)
exten => 1111,n,Playback(/tmp/asterisk-recording) ; Listen to your voice
exten => 1111,n,wait(2)
exten => 1111,n,Hangup(16)

; Create an extension, 2600, for evaluating echo latency.
exten => 2600,1,Answer() 
exten => 2600,n,Echo()
exten => 2600,n,Hangup(16)

; 2601 is for testing prompts
exten => 2601,1,Answer()
exten => 2601,n,Playback(followme/sorry)
exten => 2601,n,Hangup(16)

; The 2101 extension is used for factory testing with zoiper.
exten => 2101,1,Dial(SIP/zoiper,180)
exten => 2101,n,Hangup(${HANGUPCAUSE})

; The 2100 extension is for factory testing with the test SIM.
exten => 2100,1,Dial(SIP/IMSI001010000000000,180)
exten => 2100,n,Hangup(${HANGUPCAUSE})



; The messages here need to be installed in /var/lib/asterisk/sounds/xx/, where xx is the 2-letter language code.


[macro-dialGSM]
; macro for OpenBTS users
exten => s,1,Set(CDR(hangup-direction)=A)
exten => s,n,Dial(SIP/${ARG1}@${ARG2}:${ARG3},30)
exten => s,n,NoOP(direction:"${CDR(hangup-direction)}" status:${DIALSTATUS} cause:${HANGUPCAUSE})
exten => s,n,Set(CDR(hangup-direction)=${IF($["${DIALSTATUS}"="ANSWER"]?B:C)})
exten => s,n,Goto(s-${HANGUPCAUSE},1)
; case 5 - C3
exten => s-0,1,Playback(PartyNotAnswering)
; case 5 - P2.6
;exten => s-0,1,Playback(PartyNotAvailableNow)
; case 1, 2, 3
exten => s-17,1,Busy(30)
; case 6
exten => s-19,1,Playback(NumberOutOfCoverage)
; case 4
exten => s-34,1,Playback(AllCircuitsBusy)


[macro-dialOUT]
; macro for outgoing calls
exten => s,1,Dial(SIP/GW1/${ARG1},180) 
exten => s,2,Goto(s-${DIALSTATUS},1)
exten => s-CANCEL,1,Hangup()
exten => s-NOANSWER,1,Hangup()
exten => s-BUSY,1,Busy(30)
exten => s-CONGESTION,1,Congestion(30)
exten => s-CHANUNAVAIL,1,Dial(SIP/GW2/${ARG1},180)
exten => h,1,Log(NOTICE,direction:"${CDR(hangup-direction)}" status:${DIALSTATUS} cause:${HANGUPCAUSE})

[outbound-trunk]
; If you had an external trunk, you would dial it here.
exten => _9.,1,Macro(dialOUT,${EXTEN:1})                ;Any number starting with 9 (discard '9' while dialing)

[other-lines]
include => default
include => outbound-trunk
; case 7
exten => i,1,Playback(NumberIncorrect)




[phones]
; This is the context for handsets provisioned through the realtime database.
exten => _X.,1,Set(Name=${ODBC_SQL(select dial from dialdata_table where exten=\"${EXTEN}\")})
exten => _X.,n,GotoIf($["${Name}"=""] ?other-lines,${EXTEN},1)
exten => _X.,n,Set(IPAddr=${ODBC_SQL(select ipaddr from sip_buddies where username=\"${Name}\")})
exten => _X.,n,GotoIf($["${IPAddr}"!=""] ?getport)
exten => _X.,n,Set(IPAddr="127.0.0.1") ; Port was not set, so set to default. Gets around bug in subscriberRegistry
exten => _X.,n(getport),Set(Port=${ODBC_SQL(select port from sip_buddies where username=\"${Name}\")})
exten => _X.,n,GotoIf($["${Port}"!=""] ?dialNum)
exten => _X.,n,Set(Port=5062) ; Port was not set, so set to default. Gets around bug in subscriberRegistry
exten => _X.,n(dialNum),Macro(dialGSM,${Name},${IPAddr},${Port})
exten => _X.,n,Hangup(${HANGUPCAUSE})



[sip-local]
; This context is the union of all of the in-network contexts.
include => default
include => phones




[sip-external]
; This is the top-level context that gives access to out-of-network calling.
; also includes the in-network calling.
include => default
include => sip-local
include => outbound-trunk

