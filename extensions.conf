[general]
autofallthrough=no	;don't let asterisk guss
static=yes		;don't allow asterisk to change the config file

[globals]


[default]
; This is the context for handsets that are allowed to attached via open registration.
; Normally, this context is only used for testing.

; These are test extensions that you might want to disable after installation.

; Record voice file to /tmp directory
exten => 1111,1,Set(CDR(hangupdirection)=A)
same => n,Answer(2000) ; Call 1111 to Record new Sound Files
same => n,Playback(beep)	; play a beep sount to indicat that recording has startet
same => n,Record(/tmp/asterisk-recording:gsm) ; Press # to stop recording
same => n,Wait(2)
same => n,Playback(/tmp/asterisk-recording) ; Listen to your voice
same => n,wait(2)
same => n,Set(CDR(hangupdirection)=SYSTEM)
same => n,Hangup(16)

; Create an extension, 2600, for evaluating echo latency.
exten => 2600,1,Set(CDR(hangupdirection)=A)
same => n,Answer() 
same => n,Echo()
same => n,Set(CDR(hangupdirection)=SYSTEM)
same => n,Hangup(16)

; 2601 is for testing prompts
exten => 2601,1,Set(CDR(hangupdirection)=A)
same => n,Answer(2000)	;allow the channel to be establis
same => n,Playback(followme/sorry)
same => n,Set(CDR(hangupdirection)=SYSTEM)
same => n,Hangup(16)

; 2602 testtone
exten => 2602,1,Set(hangupdirection=A)
same => n,Answer()
same => n,Milliwatt()
same => n,Set(hangupdirection=SYSTEM)
same => n,Hangup()

; 2603 IP address
exten => 2603,1,Set(hangupdirection=A)
same => n,Answer(2000)
same => n,Set(IP=${SHELL(ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $1}')})
same => n,SayNumber(${CUT(IP,.,1)})
same => n,Playback(letters/dot)
same => n,SayNumber(${CUT(IP,.,2)})
same => n,Playback(letters/dot)
same => n,SayNumber(${CUT(IP,.,3)})
same => n,Playback(letters/dot)
same => n,SayNumber(${CUT(IP,.,4)})
same => n,Set(hangupdirection=SYSTEM)
same => n,Hangup()

; 2604 say IMSI
exten => 2604,1,Set(hangupdirection=A)
same => n,Answer(2000)
same => n,SayDigits(${A-IMSI})
same => n,Set(hangupdirection=SYSTEM)
same => n,Hangup()

; The 2101 extension is used for factory testing with zoiper.
exten => 2101,1,Set(CDR(hangupdirection)=A)
same => n,Dial(SIP/zoiper,180,g)
same => n,Set(CDR(hangupdirection)=${IF($["${DIALSTATUS}"="ANSWER"]?B:SYSTEM)})
same => n,Hangup(${HANGUPCAUSE})

; The 2100 extension is for factory testing with the test SIM.
exten => 2100,1,Set(CDR(hangupdirection)=A)
same => n,GoSub(CallLimit,s,1(${CALLERID(num)},${EXTEN}))
same => n,Dial(SIP/IMSI001010000000000,180,g)
same => n,Set(CDR(hangupdirection)=${IF($["${DIALSTATUS}"="ANSWER"]?B:SYSTEM)})
same => n,Hangup(${HANGUPCAUSE})

exten => h,1,Log(NOTICE,A-Number=${A-Number} A-Name=${A-Name} A-IMSI=${A-IMSI} B-Number=${B-Number} B-Name=${B-Name} B-IMSI=${B-IMSI} hangupcause=${HANGUPCAUSE} dialstatus=${DIALSTATUS} hangupdirection=${CDR(hangupdirection)} duration=${CDR(duration)} billsec=${CDR(billsec)})

; The messages here need to be installed in /var/lib/asterisk/sounds/xx/, where xx is the 2-letter language code.

[HangupCause]
exten => 0,1,Progress()
same => n,Playback(PartyNotAnswering,noanswer)	;0 Unspecified. No other cause codes applicable.	; case 5 - C3
;exten => 0,n,Playback(PartyNotAvailableNow,noanswer)	;0 Unspecified. No other cause codes applicable.	; case 5 - P2.6
exten => 16,1,Hangup(${HANGUPCAUSE})			;16 NORMAL_CLEARING
exten => 17,1,Busy(5)					;17 USER_BUSY						; case 1, 2, 3
exten => 19,1,Progress()
same => n,Playback(NumberOutOfCoverage,noanswer)	;19 NO_ANSWER						; case 6
exten => _X!,1,Return()					;unexpectet hangupcause try to do failower

exten => h,1,Log(NOTICE,A-Number=${A-Number} A-Name=${A-Name} A-IMSI=${A-IMSI} B-Number=${B-Number} B-Name=${B-Name} B-IMSI=${B-IMSI} hangupcause=${HANGUPCAUSE} dialstatus=${DIALSTATUS} hangupdirection=${CDR(hangupdirection)} duration=${CDR(duration)} billsec=${CDR(billsec)})


[dialGSM]
; GoSub for OpenBTS users
exten => _[+0-9I]!,1,Set(CDR(hangupdirection)=A)
same => n,GoSub(CallLimit,s,1(${CALLERID(num)},${EXTEN}))
same => n,Dial(SIP/${ARG1}@${ARG2}:${ARG3},30,g)
same => n,Set(CDR(hangupdirection)=${IF($["${DIALSTATUS}"="ANSWER"]?B:SYSTEM)})
same => n,GoSub(HangupCause,${HANGUPCAUSE},1)
same => n,Return()


[dialOUT1]
; gosub for outgoing calls (primary)
exten => _[+0-9]!,1,Set(CDR(hangupdirection)=A)
same => n,GoSub(CallLimit,s,1(${CALLERID(num)},${EXTEN}))
same => n,Dial(SIP/GW1/${EXTEN},180,g) 
same => n,Set(CDR(hangupdirection)=${IF($["${DIALSTATUS}"="ANSWER"]?B:SYSTEM)})
same => n,GoSub(HangupCause,${HANGUPCAUSE},1)
same => n,Return()

[dialOUT2]
; gosub for outgoing calls (secondary)
exten => _[+0-9]!,1,Set(CDR(hangupdirection)=A)
same => n,GoSub(CallLimit,s,1(${CALLERID(num)},${EXTEN}))
same => n,Dial(SIP/GW2/${ARG1},180,g)
same => n,Set(CDR(hangupdirection)=${IF($["${DIALSTATUS}"="ANSWER"]?B:SYSTEM)})
same => n,GoSub(HangupCause,${HANGUPCAUSE},1)
same => n,Return()


[outbound-trunk]
; If you had an external trunk, you would dial it here.
exten => _[+0-9a-zA-Z]!,1,GoSub(dialOUT1,${EXTEN},1)
same => n,GoSub(dialOUT2,${EXTEN:1},1)
same => n,GoSub(HangupCause,${HANGUPCAUSE},1)
same => n,Progress()
same => n,Playback(AllCircuitsBusy,noanswer)	;all other error codes
same => n,Congestion(5)


[other-lines]
include => default
include => outbound-trunk
; case 7
exten => i,1,Playback(NumberIncorrect)


[CallLimit]
exten => s,1,GotoIf($["${B-IMSI}"=""]?A-IMSI)			; B is not from openBTS no need to count
same => n,Set(GROUP(B)=${B-IMSI})				;count the B IMSI
same => n,ExecIf($[${GROUP_COUNT(${B-IMSI})}>1]?Busy())		;busy if we try to make more that 1 call

same => n(A-IMSI),ExecIf($["${A-IMSI}"=""]?Return())			; A is not from openBTS no need to count
same => n,Set(GROUP(A)=${A-IMSI})				;count the caller
same => n,ExecIf($[${GROUP_COUNT(${A-IMSI})}>1]?Busy())		;busy if we try to receive more that 1 call
same => n,Return()

exten => h,1,Log(NOTICE,A-Number=${A-Number} A-Name=${A-Name} A-IMSI=${A-IMSI} B-Number=${B-Number} B-Name=${B-Name} B-IMSI=${B-IMSI} hangupcause=${HANGUPCAUSE} dialstatus=${DIALSTATUS} hangupdirection=${CDR(hangupdirection)} duration=${CDR(duration)} billsec=${CDR(billsec)})

[phones]
; This is the context for handsets provisioned through the realtime database.
exten => _X!,1,Set(B-Number=${EXTEN})
same => n,Set(B-IMSI=${ODBC_SQL(select dial from dialdata_table where exten=\"${B-Number}\")})
same => n,Set(A-IMSI=${IF(${EXISTS(${SIP_HEADER(P-IMSI)})}?${SIP_HEADER(P-IMSI)}:${CALLERID(name)})})
same => n,Set(A-Name=${CALLERID(name)})
same => n,Set(A-Number=${ODBC_SQL(select callerid from sip_buddies where username=\"${A-IMSI}\")})
same => n,ExecIf(${ISNULL(${A-Number})}?Set(A-Number=${CALLERID(num)}):Set(CALLERID(num)=${A-Number}))
same => n,GotoIf($["${B-IMSI}"=""] ?other-lines,${B-Number},1)		; this is not known number, send call to PSTN
same => n,Set(B-IPAddr=${ODBC_SQL(select ipaddr from sip_buddies where username=\"${B-IMSI}\")})
same => n,ExecIf($["${B-IPAddr}"=""]?Set(B-IPAddr="127.0.0.1"))	; Port was not set, so set to default. Gets around bug in subscriberRegistry
same => n,Set(B-Port=${ODBC_SQL(select port from sip_buddies where username=\"${B-IMSI}\")})
same => n,ExecIf($["${B-Port}"=""]?Set(B-Port=5062))			; Port was not set, so set to default. Gets around bug in subscriberRegistry
same => n,GoSub(dialGSM,${B-Number},1(${B-IMSI},${B-IPAddr},${B-Port}))
same => n,Progress()
same => n,Playback(AllCircuitsBusy,noanswer)				;all other error codes
same => n,Congestion(5)


[sip-local]
; This context is the union of all of the in-network contexts.
include => default
include => phones




[sip-external]
; This is the top-level context that gives access to out-of-network calling.
; also includes the in-network calling.
include => default
include => sip-local
include => outbound-trunk

[from-pstn]
exten => _X!,1,Set(B-Number=${EXTEN})
same => n,Set(B-IMSI=${ODBC_SQL(select dial from dialdata_table where exten=\"${B-Number}\")})
same => n,Set(B-IPAddr=${ODBC_SQL(select ipaddr from sip_buddies where username=\"${B-IMSI}\")})
same => n,ExecIf($["${B-IPAddr}"=""]?Set(B-IPAddr="127.0.0.1"))	; Port was not set, so set to default. Gets around bug in subscriberRegistry
same => n,Set(B-Port=${ODBC_SQL(select port from sip_buddies where username=\"${B-IMSI}\")})
same => n,ExecIf($["${B-Port}"=""]?Set(B-Port=5062))			; Port was not set, so set to default. Gets around bug in subscriberRegistry
same => n,GoSub(dialGSM,${B-Number},1(${B-IMSI},${B-IPAddr},${B-Port}))
same => n,Progress()
same => n,Playback(AllCircuitsBusy,noanswer)				;all other error codes
same => n,Congestion(5)
