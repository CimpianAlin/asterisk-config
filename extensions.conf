[globals]


[default]
; This is the context for handsets that are allowed to attached via open registration.
; Normally, this context is only used for testing.

; These are test extensions that you might want to disable after installation.

; Record voice file to /tmp directory
exten => 1111,1,Wait(2) ; Call 1111 to Record new Sound Files
same => n,Set(CDR(hangupdirection)=A)
same => n,Record(/tmp/asterisk-recording:gsm) ; Press # to stop recording
same => n,Wait(2)
same => n,Playback(/tmp/asterisk-recording) ; Listen to your voice
same => n,wait(2)
same => n,Set(CDR(hangupdirection)=SYSTEM)
same => n,Hangup(16)

; Create an extension, 2600, for evaluating echo latency.
exten => 2600,1,Answer() 
same => n,Set(CDR(hangupdirection)=A)
same => n,Echo()
same => n,Set(CDR(hangupdirection)=SYSTEM)
same => n,Hangup(16)

; 2601 is for testing prompts
exten => 2601,1,Answer()
same => n,Set(CDR(hangupdirection)=A)
same => n,Playback(followme/sorry)
same => n,Set(CDR(hangupdirection)=SYSTEM)
same => n,Hangup(16)

; The 2101 extension is used for factory testing with zoiper.
exten => 2101,1,Set(CDR(hangupdirection)=A)
same => n,Dial(SIP/zoiper,180,g)
same => n,Set(CDR(hangupdirection)=${IF($["${DIALSTATUS}"="ANSWER"]?B:SYSTEM)})
same => n,Hangup(${HANGUPCAUSE})

; The 2100 extension is for factory testing with the test SIM.
exten => 2100,1,Set(CDR(hangupdirection)=A)
same => n,Dial(SIP/IMSI001010000000000,180,g)
same => n,Set(CDR(hangupdirection)=${IF($["${DIALSTATUS}"="ANSWER"]?B:SYSTEM)})
same => n,Hangup(${HANGUPCAUSE})


exten => h,1,Log(NOTICE,${CALLERID(all)} hangupcause=${HANGUPCAUSE} dialstatus=${DIALSTATUS} hangupdirection=${CDR(hangupdirection)})

; The messages here need to be installed in /var/lib/asterisk/sounds/xx/, where xx is the 2-letter language code.


[dialGSM]
; GoSub for OpenBTS users
exten => s,1,Set(CDR(hangup-direction)=A)
same => n,Dial(SIP/${ARG1}@${ARG2}:${ARG3},30,g)
same => n,Set(CDR(hangupdirection)=${IF($["${DIALSTATUS}"="ANSWER"]?B:SYSTEM)})
same => n,Goto(s-${HANGUPCAUSE},1)
; case 5 - C3
exten => s-0,1,Playback(PartyNotAnswering)
; case 5 - P2.6
;exten => s-0,1,Playback(PartyNotAvailableNow)
; case 1, 2, 3
exten => s-17,1,Busy(30)
; case 6
exten => s-19,1,Playback(NumberOutOfCoverage)
; case 4
exten => s-34,1,Playback(AllCircuitsBusy)

;normal call clearing
exten => s-16,1,Hangup(${HANGUPCAUSE})

[dialOUT1]
; gosub for outgoing calls (primary)
exten => _[+0-9]!,1,Set(CDR(hangupdirection)=A)
same => _[+0-9]!,n,Dial(SIP/GW1/${EXTEN},180,g) 
same => _[+0-9]!,n,Set(CDR(hangupdirection)=${IF($["${DIALSTATUS}"="ANSWER"]?B:SYSTEM)})
same => _[+0-9]!,n,Goto(s-${DIALSTATUS},1)

exten => s-ANSWER,1,Hnagup(${HANGUPCAUSE})
exten => s-CANCEL,1,Hangup()
exten => s-NOANSWER,1,Hangup()
exten => s-BUSY,1,Busy(30)
exten => s-CONGESTION,1,Congestion(30)
exten => s-CHANUNAVAIL,1,Return()

exten => h,1,Log(NOTICE,${CALLERID(all)} hangupcause=${HANGUPCAUSE} dialstatus=${DIALSTATUS} hangupdirection=${CDR(hangupdirection)})

[dialOUT2]
; gosub for outgoing calls (secondary)
exten => _[+0-9]!,1,Set(CDR(hangupdirection)=A)
same => _[+0-9]!,n,Dial(SIP/GW2/${ARG1},180,g)
same => _[+0-9]!,n,Set(CDR(hangupdirection)=${IF($["${DIALSTATUS}"="ANSWER"]?B:SYSTEM)})
same => _[+0-9]!,n,Hangup(${HANGUPCAUSE})

exten => h,1,Log(NOTICE,${CALLERID(all)} hangupcause=${HANGUPCAUSE} dialstatus=${DIALSTATUS} hangupdirection=${CDR(hangupdirection)})

[outbound-trunk]
; If you had an external trunk, you would dial it here.
exten => _9.,1,GoSub(dialOUT1,${EXTEN:1})                ;Any number starting with 9 (discard '9' while dialing)
same => n,GoSub(dialOUT2,${EXTEN:1})                ;Any number starting with 9 (discard '9' while dialing)

[other-lines]
include => default
include => outbound-trunk
; case 7
exten => i,1,Playback(NumberIncorrect)




[phones]
; This is the context for handsets provisioned through the realtime database.
exten => _X.,1,Set(Name=${ODBC_SQL(select dial from dialdata_table where exten=\"${EXTEN}\")})
same => n,GotoIf($["${Name}"=""] ?other-lines,${EXTEN},1)
same => n,Set(IPAddr=${ODBC_SQL(select ipaddr from sip_buddies where username=\"${Name}\")})
same => n,GotoIf($["${IPAddr}"!=""] ?getport)
same => n,Set(IPAddr="127.0.0.1") ; Port was not set, so set to default. Gets around bug in subscriberRegistry
same => n(getport),Set(Port=${ODBC_SQL(select port from sip_buddies where username=\"${Name}\")})
same => n,GotoIf($["${Port}"!=""] ?dialNum)
same => n,Set(Port=5062) ; Port was not set, so set to default. Gets around bug in subscriberRegistry
same => n(dialNum),GoSub(dialGSM,s,1(${Name},${IPAddr},${Port}))
same => n,Hangup(${HANGUPCAUSE})



[sip-local]
; This context is the union of all of the in-network contexts.
include => default
include => phones




[sip-external]
; This is the top-level context that gives access to out-of-network calling.
; also includes the in-network calling.
include => default
include => sip-local
include => outbound-trunk

